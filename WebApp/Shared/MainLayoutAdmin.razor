@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authStateProvider
@inject IJSRuntime js
@inject NavigationManager _navManager


<div class="h-screen flex overflow-hidden bg-gray-100">
    <!-- Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->
    <div class="fixed inset-0 flex z-40 @(collapseNavMenu? "":"hidden")" role="dialog" aria-modal="true">
        <!--
      Off-canvas menu overlay, show/hide based on off-canvas menu state.

      Entering: "transition-opacity ease-linear duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "transition-opacity ease-linear duration-300"
        From: "opacity-100"
        To: "opacity-0"
    -->
        <div @onclick="(() => collapseNavMenu = !collapseNavMenu)" class="fixed inset-0 bg-gray-600 bg-opacity-75" aria-hidden="true"></div>

        <!--
      Off-canvas menu, show/hide based on off-canvas menu state.

      Entering: "transition ease-in-out duration-300 transform"
        From: "-translate-x-full"
        To: "translate-x-0"
      Leaving: "transition ease-in-out duration-300 transform"
        From: "translate-x-0"
        To: "-translate-x-full"
    -->
        <div class="relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-indigo-700">
            <!--
      Close button, show/hide based on off-canvas menu state.

      Entering: "ease-in-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
      Leaving: "ease-in-out duration-300"
        From: "opacity-100"
        To: "opacity-0"
    -->
            <div class="absolute top-0 right-0 -mr-12 pt-2">
                <button type="button" @onclick="(() => collapseNavMenu = !collapseNavMenu)" class="ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                    <span class="sr-only">Close sidebar</span>
                    <!-- Heroicon name: outline/x -->
                    <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="flex-shrink-0 flex items-center px-4">
                <a href="/" target="_blank">
                    <img class="h-16 w-auto" src="_content/webapp/myassets/resources/avatar.svg" alt="AAB">
                </a>
            </div>
            @*<CascadingValue Value="@collapseNavMenu">
            </CascadingValue>*@
                <NavMenuAdmin CollapaseNavMenu="ToggleNavMenu" />
        </div>

        <div class="flex-shrink-0 w-14" aria-hidden="true">
            <!-- Dummy element to force sidebar to shrink to fit close icon -->
        </div>
    </div>

    <!-- Static sidebar for desktop -->
    <div class="bg-aabBlue xl:flex xl:flex-shrink-0 md:hidden">
        <div class="flex flex-col w-64">
            <!-- Sidebar component, swap this element with another sidebar if you like -->
            <div class="flex flex-col flex-grow pt-5 pb-4 overflow-y-auto">
                <div class="grid justify-items-center">
                    <a href="/member/dashboard" target="_blank">
                        <img class="h-16 w-auto" src="_content/webapp/myassets/resources/avatar.svg" alt="AAB">
                    </a>
                </div>
                <NavMenuAdmin />
            </div>
        </div>
    </div>
    <div class="flex flex-col w-0 flex-1 overflow-hidden">
        <div class="relative z-10 flex-shrink-0 flex h-16 bg-white shadow">
            <button type="button" @onclick="(() => collapseNavMenu = !collapseNavMenu)" class="px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 xl:hidden">
                <span class="sr-only">Open sidebar</span>
                <!-- Heroicon name: outline/menu-alt-2 -->
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                </svg>
            </button>
            <div class="flex-1 px-4 flex justify-between">
                <div class="flex-1 flex">
                    <form class="w-full flex md:ml-0" action="#" method="GET">
                        <label for="search_field" class="sr-only">Search</label>
                        <div class="relative w-full text-gray-400 focus-within:text-gray-600">
                            <div class="absolute inset-y-0 left-0 flex items-center pointer-events-none">
                                <!-- Heroicon name: solid/search -->
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                </svg>
                            </div>
                            <input id="search_field" @bind="@SearchString" @oninput="@SearchChanged" class="block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm" placeholder="Search" type="search" name="search">
                        </div>
                    </form>
                </div>
                <div class="ml-4 flex items-center md:ml-6">

                    <!-- Profile dropdown -->
                    <div class="ml-3 relative">
                        <div>
                            <button type="button" class="relative z-10 max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" id="user-menu-button" aria-expanded="false" aria-haspopup="true">
                                <span class="sr-only">Open user menu</span>
                                <img @onclick="(() => collapseProfileMenu = !collapseProfileMenu)" @onfocusout="hideProfileMenu" class="h-8 w-8 rounded-full" src="_content/webapp/myassets/resources/avatar.svg" alt="">
                            </button>
                        </div>
                        <button @onclick="(() => collapseProfileMenu = !collapseProfileMenu)" tabindex="-1" class="fixed inset-0 h-full w-full bg-black opacity-40 cursor-default @(collapseProfileMenu ? "hidden" : "")"></button>
                        <!--
                          Dropdown menu, show/hide based on menu state.

                          Entering: "transition ease-out duration-100"
                            From: "transform opacity-0 scale-95"
                            To: "transform opacity-100 scale-100"
                          Leaving: "transition ease-in duration-75"
                            From: "transform opacity-100 scale-100"
                            To: "transform opacity-0 scale-95"
                        -->
                        <div class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none @(collapseProfileMenu ? "hidden" : "")" role="menu" aria-orientation="vertical" aria-labelledby="user-menu-button" tabindex="-1">
                            <!-- Active: "bg-gray-100", Not Active: "" -->
                            <AuthorizeView>
                                <Authorized>
                                    <a class="block px-4 py-2 text-sm text-gray-700 truncate" title="@context.User.Identity.Name" role="menuitem" tabindex="-1" id="user-menu-item-0">Hello, @context.User.Identity.Name!</a>

                                    @*<a href="#" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="user-menu-item-1">Settings</a>*@

                                    @*<a href="Identity/Account/LogOut" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="user-menu-item-2">Sign out</a>*@

                                    <a href="/" @onclick="(() => Logout())" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1">Logout</a>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <main class="flex-1 relative overflow-y-auto focus:outline-none">
            <div class="py-6">

                <div class="max-w-7xl mx-auto px-4 sm:px-6 md:px-8">
                    <!-- Replace with your content
                    <div class="py-4">
                        <div class="border-4 border-dashed border-gray-200 rounded-lg h-96"></div>
                    </div> -->
                    <!-- /End replace -->
                    <CascadingValue Value="@SearchString">
                        @Body
                    </CascadingValue>
                </div>
            </div>
        </main>

    </div>
</div>



@code {
    public string SearchString;

    protected async override Task OnInitializedAsync()
    {
        User loggedUser = await ((CustomAuthenticationStateProvider)_authStateProvider).GetLoggedInUser();
        await base.OnInitializedAsync();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        //await jsRuntime.InvokeVoidAsync("renderRevolutionSliderJS.revSlider");
        if (firstRender)
        {
            //ObjectReference = DotNetObjectReference.Create(this);
            //await jsRuntime.InvokeVoidAsync("renderRevolutionSliderJS.revSlider", ObjectReference);


            //await jsRuntime.InvokeVoidAsync("renderLanguageDropdown");
            //await js.LanguageDropdown();
            //await js.ToolbarDropdown();
            //await js.ScrollTopValue();
            //await js.ScrollToTop();
        }

    }

    private async void Logout()
    {
        await ((CustomAuthenticationStateProvider)_authStateProvider).MarkUserAsLoggedOut();
    }

    private void SearchChanged(ChangeEventArgs args)
    {
        SearchString = (string)args.Value;
    }










    private bool collapseNavMenu = false;
    private bool collapseProfileMenu = true;

    private void ToggleProfileMenu()
    {
        collapseProfileMenu = !collapseProfileMenu;
    }

    private void hideProfileMenu()
    {
        collapseProfileMenu = true;
    }

    private void ToggleNavMenu(bool collapse)
    {
        collapseNavMenu = collapse;
    }

}