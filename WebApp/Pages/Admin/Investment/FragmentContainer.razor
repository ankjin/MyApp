<div>
    @*<h2 class="text-3xl font-extrabold tracking-tight mb-4 sm:text-4xl">
        Payin
    </h2>*@

    <PayinFragment>
        <ChildContentPayin>
            @if (RenderOption == 1)
            {
                <IndexPayin UserId="@UserId" RenderView="RenderView" ReturnedId="CallBackId" TotalInvestedAmtPayoutAmt="@((args)=> MyTotalAmount(((decimal, decimal))args))" />
            }
            @if (RenderOption == 2)
            {
                <CreatePayin UserId="@UserId" RenderView="RenderView" />
            }
            @if (RenderOption == 3)
            {
                <EditPayin InvestModelId="@InvestModelId" RenderView="RenderView" />
            }
        </ChildContentPayin>
    </PayinFragment>

</div>





@code {
    [Parameter]
    public string UserId { get; set; }
    public IEnumerable<InvestmentModel> investmentModels;
    private int OddEven;

    int RenderOption = 1;
    string InvestModelId = "";

    [Parameter]
    public EventCallback<(decimal, decimal)> UserTotalInvestedAmtPayoutAmt { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void RenderView(int p)
    {
        RenderOption = p;

        InvokeAsync(() => {
            StateHasChanged();
        });
    }
    private void CallBackId(string investModelId)
    {
        RenderOption = 3;
        InvestModelId = investModelId;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private void TotalInvestedAmount(decimal totalInvestAmount)
    {
        //UserTotalInvestedAmount.InvokeAsync(totalInvestAmount);
    }
    private async void MyTotalAmount((decimal a, decimal b) args)
    {
        await UserTotalInvestedAmtPayoutAmt.InvokeAsync((args.a, args.b));
    }
}
