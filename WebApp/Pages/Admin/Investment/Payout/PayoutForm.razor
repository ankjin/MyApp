@inject IJSRuntime js
@inject IBankingInfoRepository _bankingRepo


<EditForm class="space-y-8 divide-y divide-gray-200" Model="investmentPayout" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="space-y-8 divide-y divide-gray-200">
    </div>

    <div class="mt-2">


        <div class="mt-6 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">

            <div class="sm:col-span-6">
                <div class="relative flex items-start">
                    <div class="flex items-center h-5">
                        <InputCheckbox id="IsActive" name="IsActive" @bind-Value="@investmentPayout.IsActive" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded" />
                    </div>
                    <div class="ml-3 text-sm">
                        <label for="IsActive" class="font-medium text-gray-700">Is Active</label>
                    </div>
                </div>
            </div>





            <div class="sm:col-span-2">
                <label for="first_name" class="block text-sm font-medium text-gray-700">
                    Mobile
                </label>
                <div class="mt-1">
                    <InputDate @bind-Value="@investmentPayout.PayoutDate" type="date" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                    <ValidationMessage For="() => investmentPayout.PayoutDate" />
                </div>
            </div>

            <div>
                <label for="price" class="block text-sm font-medium text-gray-700">Payout Amount</label>
                <div class="mt-1 relative rounded-md shadow-sm">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <span class="text-gray-500 sm:text-sm">
                            $
                        </span>
                    </div>
                    <InputNumber @bind-Value="@investmentPayout.PayoutAmount" class="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md" placeholder="0.00" aria-describedby="price-currency" />
                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                        <span class="text-gray-500 sm:text-sm" id="price-currency">
                            USD
                        </span>
                    </div>
                </div>
            </div>

            <div class="sm:col-span-1">
                <label class="block text-sm font-medium text-gray-700">Account Type</label>
                <div class="mt-1">
                    <InputSelect @bind-Value="@investmentPayout.ModeOfPayment" @onclick="@((p) => OnModeSelectionChange(investmentPayout.ModeOfPayment))" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        @foreach (ModeOfPayment e in Enum.GetValues(typeof(ModeOfPayment)))
                        {
                            <option value="@e">@e.GetDisplayName()</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => investmentPayout.ModeOfPayment" />
                </div>
            </div>

            <div class="sm:col-span-2">
                <label for="first_name" class="block text-sm font-medium text-gray-700">
                    Payout Bank
                </label>
                <div class="mt-1">
                    @if (bankingInfos is not null)
                    {
                        <select @onchange="OnBankingSelectionChange" value="@investmentPayout.BankingInfoId" class="mt-1 block w-full bg-white border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm @(string.IsNullOrEmpty(ErrorMsg) ? "" : "invalid")">
                            @foreach (var item in bankingInfos.ToList())
                            {
                                <option value="@item.Id">@item.BankName</option>
                            }
                        </select>

                        if (!string.IsNullOrEmpty(ErrorMsg))
                        {
                            <div class="validation-message">@ErrorMsg</div>
                        }
                    }
                </div>
            </div>



        </div>
        



    </div>

    <div class="pt-4 pb-4">
        <div class="flex justify-end">
            <button type="button" @onclick="@OnCancelSubmit" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
            </button>
            <button type="submit" class="ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Save
            </button>
        </div>
    </div>

</EditForm>


@code {
    [Parameter]
    public string TitleOperation { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public InvestmentPayout investmentPayout { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public EventCallback OnCancelSubmit { get; set; }
    [Parameter]
    public string ErrorMsg { get; set; }

    IEnumerable<BankingInfo> bankingInfos;

    protected async override Task OnInitializedAsync()
    {
        bankingInfos = await _bankingRepo.GetBankingInfoByUserIdAsync(new Guid(UserId));
        if (bankingInfos.Count() > 0)
        {
            if(investmentPayout.BankingInfoId == 0)
            {
                investmentPayout.BankingInfoId = bankingInfos.Where(x => x.IsPrimary).FirstOrDefault().Id;
            }
        }
    }

    private void OnModeSelectionChange(ModeOfPayment mode)
    {
        if (mode.ToString() == "0" || string.IsNullOrEmpty(mode.ToString()))
        {
            return;
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void oninput()
    {

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
        }

    }

    private void OnBankingSelectionChange(ChangeEventArgs changeEventArgs)
    {
        investmentPayout.BankingInfoId = int.Parse(changeEventArgs.Value.ToString());

        InvokeAsync(() =>
        {
            if (!string.IsNullOrEmpty(investmentPayout.BankingInfoId.ToString()))
            {
                ErrorMsg = "";
            }
            else
            {
                ErrorMsg = "Banking is required field";
            }
            StateHasChanged();
        });
    }



}