@inject IUserModelRepository _userRepo

@if (user is not null)
{

<div class="max-w-lg mx-auto">
    <h2 class="text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl">
        @user.FullName
    </h2>
    <div class="sm:col-span-2">
        <div class="flex items-center">

            <div class="image-upload">
                <label for="file-input">
                    <ProfileImage IsCursorPointerOn="true" HSize="h-28" WSize="w-28" CssOptions="rounded-full" Src="@user.UserImg64" />
                </label>
                <InputFile id="file-input" class="cursor-pointer" OnChange="@OnFileSelection" accept="image/png, image/jpeg" />
            </div>
        </div>
    </div>
    <div class="mt-8 text-base text-gray-500">
        @if (!string.IsNullOrEmpty(Address))
        {
            <div class="mt-6">
                <dt class="sr-only">Address</dt>
                <dd class="flex">
                    <svg class="flex-shrink-0 h-6 w-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    <span class="ml-3">
                        @Address
                    </span>
                </dd>
            </div>
        }
        <div class="mt-6">
            <dt class="sr-only">Phone number</dt>
            <dd class="flex">
                <svg class="flex-shrink-0 h-6 w-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                </svg>
                <span class="ml-3">
                    @user.Mobile
                </span>
            </dd>
        </div>
        <div class="mt-3">
            <dt class="sr-only">Email</dt>
            <dd class="flex">
                <svg class="flex-shrink-0 h-6 w-6 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <span class="ml-3">
                    @user.EmailAddress
                </span>
            </dd>
        </div>
        <div class="mt-6">
            <dt class="sr-only">$</dt>
            <dd class="">
                <span class="ml-1">
                    Total Invested
                </span>
                <h2 class="text-3xl font-extrabold tracking-tight sm:text-3xl">
                    @*@user.InvestmentModels.Sum(x => x.InvestAmount).ToString("n2")*@
                    @UserTotalInvestedAmount.ToString("n2")
                </h2>
            </dd>
        </div>
        @*<div class="mt-3">
            <dt class="sr-only">$</dt>
            <dd class="">
                <span class="ml-1">
                    Total Payouts
                </span>
                <h2 class="text-3xl font-extrabold tracking-tight sm:text-3xl">
                    @user.InvestmentModels.Sum(x => x.InvestmentPayouts.Sum(x => x.PayoutAmount)).ToString("n2")
                </h2>
            </dd>
        </div>*@
    </div>

</div>

}







@code {
    [Parameter]
    public decimal UserTotalInvestedAmount { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string Address { get; set; }
    User user;

    protected override void OnInitialized()
    {
        user = _userRepo.GetUserWithRoleAndInvestment(new Guid(UserId));
        base.OnInitialized();
    }




    /// <summary>
    /// Source https://www.learmoreseekmore.com/2020/10/blazor-webassembly-fileupload.html
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        string oldImg64 = user.UserImg64;

        long MAXALLOWEDSIZE = 12000000;

        //int ctr = 1;
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            if (file.ContentType.ToLower() == "image/jpeg" || file.ContentType.ToLower() == "image/png")
            {
                if (file.Size < MAXALLOWEDSIZE)
                {

                    var buffers = new byte[file.Size];
                    await file.OpenReadStream(MAXALLOWEDSIZE).ReadAsync(buffers);
                    string fileType = file.ContentType;
                    string fileUrl = $"data:{fileType};base64,{Convert.ToBase64String(buffers)}";
                    user.UserImg64 = fileUrl;

                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                }
            }
            else
            {
                // Only PJG and PNG format are allowed
            }
        }

        if (oldImg64 != user.UserImg64)
        {
            await _userRepo.UpdateAsync(user);
        }

    }

    //public async ValueTask<string> Base64ServiceValueTaskAsync(string fileFullPath)
    //{
    //    string base64 = "";
    //    using (FileStream reader = new FileStream(fileFullPath, FileMode.Open))
    //    {
    //        var ms = new MemoryStream();
    //        await reader.CopyToAsync(ms);
    //        reader.Close();
    //        string fileType = "application/pdf";
    //        base64 = $"data:{fileType};base64,{Convert.ToBase64String(ms.ToArray())}"; //Convert.ToBase64String(ms.ToArray());
    //    }
    //    return base64;
    //}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
        }

    }

}