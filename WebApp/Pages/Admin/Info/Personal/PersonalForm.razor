@using System.IO
@inject IJSRuntime js

<div class="relative bg-white">
    <div class="absolute inset-0">
        <div class="absolute inset-y-0 left-0 w-1/2 bg-gray-50"></div>
    </div>
    <div class="relative max-w-7xl mx-auto lg:grid lg:grid-cols-5">

        <HeaderInfo UserId="@UserId" Address="@(string.IsNullOrEmpty(personalInfo.Address) ? "" : personalInfo.Address)" />


        <div class="bg-white py-12 px-4 sm:px-6 lg:col-span-3 lg:px-8">


            <div class="max-w-lg mx-auto lg:max-w-none">


                <div>
                    <div>
                        <h2 class="text-3xl font-extrabold tracking-tight sm:text-4xl">
                            Personal Information
                        </h2>

                        <EditForm class="mt-9 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-8" Model="personalInfo" OnValidSubmit="OnValidSubmit">
                            <DataAnnotationsValidator />

                            <div class="sm:col-span-2">
                                <div class="flex items-center">

                                    <div class="image-upload">
                                        <label for="file-input">
                                            @*<img class="h-28 w-28 rounded-full" src="@personalInfo.Base64" />*@
                                            <ProfileImage IsCursorPointerOn="true" HSize="h-28" WSize="w-28" CssOptions="rounded-full" Src="@personalInfo.Base64" />
                                        </label>
                                        <InputFile id="file-input" class="cursor-pointer" OnChange="@OnFileSelection" accept="image/png, image/jpeg" />
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">S/o : D/o</label>
                                <div class="mt-1">
                                    <InputText @bind-Value="@personalInfo.SoDo" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.SoDo" />
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Date of Birth</label>
                                <div class="mt-1">
                                    <InputDate @bind-Value="@personalInfo.DateOfBirth" type="date" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.DateOfBirth" />
                                </div>
                            </div>
                            <div class="sm:col-span-1">
                                <label class="block text-sm font-medium text-gray-700">Alternate Number</label>
                                <div class="mt-1">
                                    <InputText @bind-Value="@personalInfo.AlternateNumber" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.AlternateNumber" />
                                </div>
                            </div>
                            <div class="sm:col-span-1">
                                <label class="block text-sm font-medium text-gray-700">Pan Card</label>
                                <div class="mt-1">
                                    <InputText @bind-Value="@personalInfo.PanCard" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.PanCard" />
                                </div>
                            </div>
                            <div class="sm:col-span-1">
                                <div class="flex justify-between">
                                    <label class="block text-sm font-medium text-gray-700">Aadhar Card</label>
                                    @*<span id="phone-description" class="text-sm text-gray-500">Optional</span>*@
                                </div>
                                <div class="mt-1">
                                    <InputText @bind-Value="@personalInfo.AadharCard" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.AadharCard" />
                                </div>
                            </div>

                            <div class="sm:col-span-1">
                                <div class="flex justify-between">
                                    <label class="block text-sm font-medium text-gray-700">Address</label>
                                    @*<span id="phone-description" class="text-sm text-gray-500">Optional</span>*@
                                </div>
                                <div class="mt-1">
                                    <InputText @bind-Value="@personalInfo.Address" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                                    <ValidationMessage For="() => personalInfo.Address" />
                                </div>
                            </div>

                            @*<div class="sm:col-span-2">
                                    <div class="flex justify-between">
                                        <label for="how-can-we-help" class="block text-sm font-medium text-gray-700">How can we help you?</label>
                                        <span id="how-can-we-help-description" class="text-sm text-gray-500">Max. 500 characters</span>
                                    </div>
                                    <div class="mt-1">
                                        <textarea id="how-can-we-help" name="how-can-we-help" aria-describedby="how-can-we-help-description" rows="4" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border border-gray-300 rounded-md"></textarea>
                                    </div>
                                </div>*@

                            <div class="text-right sm:col-span-2">
                                <button type="button" @onclick="@OnCancelSubmit" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Cancel
                                </button>
                                <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                    Submit
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>



            </div>



        </div>
    </div>
</div>


@code {
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string TitleOperation { get; set; }
    [Parameter]
    public PersonalInfo personalInfo { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public EventCallback OnCancelSubmit { get; set; }
    [Parameter]
    public string ErrorMsg { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }



    /// <summary>
    /// Source https://www.learmoreseekmore.com/2020/10/blazor-webassembly-fileupload.html
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        long MAXALLOWEDSIZE = 12000000;

        //int ctr = 1;
        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            if (file.ContentType.ToLower() == "image/jpeg" || file.ContentType.ToLower() == "image/png")
            {
                if (file.Size < MAXALLOWEDSIZE)
                {

                    var buffers = new byte[file.Size];
                    await file.OpenReadStream(MAXALLOWEDSIZE).ReadAsync(buffers);
                    string fileType = file.ContentType;
                    string fileUrl = $"data:{fileType};base64,{Convert.ToBase64String(buffers)}";
                    personalInfo.Base64 = fileUrl;

                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
                }
            }
            else
            {
                // Only PJG and PNG format are allowed
            }



        }

    }

    public async ValueTask<string> Base64ServiceValueTaskAsync(string fileFullPath)
    {
        string base64 = "";
        using (FileStream reader = new FileStream(fileFullPath, FileMode.Open))
        {
            var ms = new MemoryStream();
            await reader.CopyToAsync(ms);
            reader.Close();
            string fileType = "application/pdf";
            base64 = $"data:{fileType};base64,{Convert.ToBase64String(ms.ToArray())}"; //Convert.ToBase64String(ms.ToArray());
        }
        return base64;
    }











    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {

        }

    }

    private void OnSelectionChange(ChangeEventArgs changeEventArgs)
    {
        //user.RoleId = int.Parse(changeEventArgs.Value.ToString());

        InvokeAsync(() =>
        {
        //if (user.RoleId > 0)
        //{
        //    ErrorMsg = "";
        //}
        //else
        //{
        //    ErrorMsg = "Role is required field";
        //}
        StateHasChanged();
        });
    }





}