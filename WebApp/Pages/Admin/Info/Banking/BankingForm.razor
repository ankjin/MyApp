@inject IJSRuntime js

    <EditForm class="mt-9 grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-8" Model="bankInfo" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />

        <div class="sm:col-span-1">
                <div class="relative flex items-start">
                    <div class="flex items-center h-5">
                        <InputCheckbox id="IsActive" name="IsActive" @bind-Value="@bankInfo.IsActive" class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300 rounded" />
                    </div>
                    <div class="ml-3 text-sm">
                        <label for="IsActive" class="font-medium text-gray-700">Is Active</label>
                    </div>
                </div>
            </div>

        <div class="sm:col-span-1">
            <label class="block text-sm font-medium text-gray-700">Account Type</label>
            <div class="mt-1">
                <InputSelect @bind-Value="@bankInfo.AccountType" @onclick="@((p) => OnAccountTypeSelectionChange(bankInfo.AccountType))" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    @foreach (BankAccountType e in Enum.GetValues(typeof(BankAccountType)))
                    {
                        <option value="@e">@e.GetDisplayName()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => bankInfo.AccountType" />
            </div>
        </div>


        <div class="sm:col-span-1">
            <label class="block text-sm font-medium text-gray-700">Account Holder Name</label>
            <div class="mt-1">
                <InputText @bind-Value="@bankInfo.AccountHolderName" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                <ValidationMessage For="() => bankInfo.AccountHolderName" />
            </div>
        </div>
        <div class="sm:col-span-1">
            <label class="block text-sm font-medium text-gray-700">Account Number</label>
            <div class="mt-1">
                <InputText @bind-Value="@bankInfo.AccountNumber" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                <ValidationMessage For="() => bankInfo.AccountNumber" />
            </div>
        </div>
        <div class="sm:col-span-1">
            <label class="block text-sm font-medium text-gray-700">Bank Name</label>
            <div class="mt-1">
                <InputText @bind-Value="@bankInfo.BankName" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                <ValidationMessage For="() => bankInfo.BankName" />
            </div>
        </div>
        <div class="sm:col-span-1">
            <label class="block text-sm font-medium text-gray-700">Branch</label>
            <div class="mt-1">
                <InputText @bind-Value="@bankInfo.Branch" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                <ValidationMessage For="() => bankInfo.Branch" />
            </div>
        </div>
        <div class="sm:col-span-1">
            <div class="flex justify-between">
                <label class="block text-sm font-medium text-gray-700">IFSC Code</label>
                @*<span id="phone-description" class="text-sm text-gray-500">Optional</span>*@
            </div>
            <div class="mt-1">
                <InputText @bind-Value="@bankInfo.IFSCCode" type="text" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md" />
                <ValidationMessage For="() => bankInfo.IFSCCode" />
            </div>
        </div>

        @*<div class="sm:col-span-2">
                <div class="flex justify-between">
                    <label for="how-can-we-help" class="block text-sm font-medium text-gray-700">How can we help you?</label>
                    <span id="how-can-we-help-description" class="text-sm text-gray-500">Max. 500 characters</span>
                </div>
                <div class="mt-1">
                    <textarea id="how-can-we-help" name="how-can-we-help" aria-describedby="how-can-we-help-description" rows="4" class="block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border border-gray-300 rounded-md"></textarea>
                </div>
            </div>*@

        <div class="text-right sm:col-span-2">
            <button type="button" @onclick="@OnCancelSubmit" class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Cancel
            </button>
            <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Submit
            </button>
        </div>
    </EditForm>



@code {
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public string TitleOperation { get; set; }
    [Parameter]
    public BankingInfo bankInfo { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
    [Parameter]
    public EventCallback OnCancelSubmit { get; set; }
    [Parameter]
    public string ErrorMsg { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
        }

    }


    private void OnAccountTypeSelectionChange(BankAccountType accountType)
    {
        if (accountType.ToString() == "0" || string.IsNullOrEmpty(accountType.ToString()))
        {
            return;
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}